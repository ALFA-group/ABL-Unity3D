using System;
using System.Collections.Generic;
using System.Linq;
using ABLUnitySimulation.SimScoringFunction;
using JetBrains.Annotations;
using Sirenix.OdinInspector;
using Sirenix.Serialization;
using Sirenix.Utilities.Editor;

#nullable enable

namespace ABLUnitySimulation
{
    /// <summary>
    /// Parameters to be used when evaluating the simulation, either in the Planner or the GP.
    /// </summary>
    [HideReferenceObjectPicker]
    public class SimEvaluationParameters
    {
        public Team friendlyTeam = Team.Red;
        public Team enemyTeam = Team.Blue;
        public int gpScoringFunctionWeight = 1;
        
        /// <summary>
        ///     The main scoring function used to rank plans generated by the Planner and GP.
        ///     This scoring function is used for sorting plans in the plan storage and fitness.
        /// </summary>
        /// <remarks>
        ///     Unity inspector serialization makes it possible for primaryScoringFunction to be null.
        /// </remarks>
        [ShowInInspector] 
        public SimScoringFunction.SimScoringFunction? primaryScoringFunction =
            new SimScoringFunction.SimScoringFunction(new List<SimScoringCriterionAndWeight>());

        /// <summary>
        ///     An array of alternate scoring functions to be used.
        ///     These are not used to sort plans in the plan storage nor evaluate fitness.
        /// </summary>
        public SimScoringFunction.SimScoringFunction[] alternateScoringFunctions =
            Array.Empty<SimScoringFunction.SimScoringFunction>();

        public SimEvaluationParameters DeepCopy()
        {
            return new SimEvaluationParameters()
            {
                alternateScoringFunctions = this.alternateScoringFunctions.Select(s => s.DeepCopy()).ToArray(),
                enemyTeam = this.enemyTeam,
                friendlyTeam = this.friendlyTeam,
                gpScoringFunctionWeight = this.gpScoringFunctionWeight,
                primaryScoringFunction = this.primaryScoringFunction?.DeepCopy()
            };
        }

    }
}